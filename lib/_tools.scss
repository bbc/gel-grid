///*------------------------------------*\
//    # GEL GRID - TOOLS
//\*------------------------------------*/

/* autoprefixer: off */

// Grid container, used to wrap all grid elements and apply the correct maximum widths
//
// 1. IE8 doesn't apply border-box box-sizing logic correctly on (min|max)-(width|height) properties.
//    As we serve IE8 a none responsive layout, lets just use the `width` property
//
// @author Shaun Bent
//
@mixin gel-wrap() {
    @if $core {
        max-width: $gel-grid-max-width-1008;
        margin: 0 auto;
        padding-right: $gel-spacing-unit;
        padding-left: $gel-spacing-unit;

        @if $fixed {
            width: #{$gel-grid-max-width-1008}; // [1]
        }
    }

    @if $enhanced {
        @include mq($from: $gel-grid-margin-change) {
            padding-left: double($gel-spacing-unit);
            padding-right: double($gel-spacing-unit);
        }

        @if $gel-grid-enable--box-sizing {
            -webkit-box-sizing: border-box;
               -moz-box-sizing: border-box;
                    box-sizing: border-box;
        }

        @if $gel-grid-enable--1280-breakpoint {
            @if $gel-grid-1280-toggle-class != null {
                .#{$gel-grid-1280-toggle-class} & {
                    @include gel-wrap-1280-breakpoint;
                }
            } @else {
                @include gel-wrap-1280-breakpoint;
            }
        }
    }
}


@mixin gel-wrap-1280-breakpoint() {
    @include mq($from: $gel-grid-max-width-1280) {
        max-width: $gel-grid-max-width-1280;

        @if $fixed {
            width: #{$gel-grid-max-width-1280}; // [1]
        }
    }
}


// A single layout group/row, this wraps individual layout items
//
// We want fine-grain control over which implementations of flexbox we support
// so we will manually handle prefixes
//
// 1. Remove any default list styling if the layout is applied to a list
// 2. Remove any margin and padding which may effect our layout
//
// @author Shaun Bent
//
@mixin gel-layout() {
    list-style: none; // [1]
    direction: flip(ltr, rtl);
    text-align: flip(left, right);

    @if $enhanced {
        display: -webkit-flex;
        display: -ms-flexbox;
        display: flex;
        -webkit-flex-flow: row wrap;
        -ms-flex-flow: row wrap;
        flex-flow: row wrap;
        -webkit-flex-grow: 1;
        -ms-flex-grow: 1;
        flex-grow: 1;
        margin-right: 0; // [2]
        margin-left: -$gel-spacing-unit;
        padding-right: 0; // [2]
        padding-left: 0; // [2]

        @include mq($from: $gel-grid-gutter-change) {
            margin-left: double(-$gel-spacing-unit);
        }

        @if $gel-grid-enable--whitespace-fix {
            letter-spacing: -0.31em;
            text-rendering: optimizespeed;

            @at-root {
                // Opera as of 12 on Windows needs word-spacing.
                .opera-only :-o-prefocus,
                #{&} {
                    word-spacing: -0.43em;
                }
            }

        }
    }
}


// A single layout group/row, this wraps individual layout items
//
// 1. Cause columns to stack side-by-side
// 2. Space columns apart
// 3. Ensure all text is aligned correctly
// 4. Align columns to the tops of each other
//
// @author  Shaun Bent
//
@mixin gel-layout-item() {
    @if $enhanced {
        width: 100%;
        display: inline-block; // [1]
        padding-left: $gel-spacing-unit; // [2]

        text-align: flip(left, right); // [3]
        vertical-align: top; // [4]

        @include mq($from: $gel-grid-gutter-change) {
            padding-left: double($gel-spacing-unit); // [2]
        }

        @if $gel-grid-enable--box-sizing {
            -webkit-box-sizing: border-box;
               -moz-box-sizing: border-box;
                    box-sizing: border-box;
        }

        @if $gel-grid-enable--whitespace-fix {
            letter-spacing: normal;
            word-spacing: normal;
            text-rendering: auto;
        }
    }
}


// Outputs a collection of generic grid classes
//
// @author Shaun Bent
//
@mixin gel-output-grid() {
    /**
     * Grid containing element
     */
    .#{$gel-grid-namespace}wrap {
        @include gel-wrap;
    }

    /**
     * A grid row
     */
    .#{$gel-grid-namespace}layout {
        @include gel-layout;
    }

    /**
     * A single grid item
     */
    .#{$gel-grid-namespace}layout__item {
        @include gel-layout-item;
    }

    /**
     * Layouts with no gutters.
     */
    .#{$gel-grid-namespace}layout--flush {
        margin-left: 0;

        > .#{$gel-grid-namespace}layout__item {
            padding-left: 0;
        }
    }

    /**
     * Reversed rendered order of layout items, e.g. items 1, 2, 3, 4 in your
     * markup will display in order 4, 3, 2, 1 on your page
     */
    .#{$gel-grid-namespace}layout--rev {
        -webkit-flex-direction: row-reverse;
        -ms-flex-direction: row-reverse;
        flex-direction: row-reverse;

        .#{$gel-grid-flexbox-feature-detection-class} & {
            direction: rtl;
            text-align: left;

            > .#{$gel-grid-namespace}layout__item,
            > %#{$gel-grid-namespace}layout__item {
                direction: ltr;
                text-align: left;
            }
        }
    }

    /**
     * Align layout items to the vertical centers of each other
     */
    .#{$gel-grid-namespace}layout--middle {
        -webkit-align-items: center;
        -ms-flex-align: center;
        -ms-grid-row-align: center;
        align-items: center;

        > .#{$gel-grid-namespace}layout__item {
            vertical-align: middle;
        }
    }

    /**
     * Align layout items to the vertical bottoms of each other
     */
    .#{$gel-grid-namespace}layout--bottom {
        -webkit-align-items: flex-end;
        -ms-flex-align: end;
        -ms-grid-row-align: flex-end;
        align-items: flex-end;

        > .#{$gel-grid-namespace}layout__item {
            vertical-align: bottom;
        }
    }

    /**
     * Make the layout items fill up from the right hand side
     */
    .#{$gel-grid-namespace}layout--right {
        text-align: right;
        -webkit-justify-content: flex-end;
        -ms-flex-pack: end;
        justify-content: flex-end;

        > .#{$gel-grid-namespace}layout__item {
            text-align: flip(left, right);
        }
    }

    /**
     * Make the layout items fill up from the center outward
     */
    .#{$gel-grid-namespace}layout--center {
        text-align: center;
        -webkit-justify-content: center;
        -ms-flex-pack: center;
        justify-content: center;

        > .#{$gel-grid-namespace}layout__item {
            text-align: flip(left, right);
        }
    }

    /**
     * Cause layout items to take up a non-explicit amount of width
     */
    .#{$gel-grid-namespace}layout--auto {
        > .#{$gel-grid-namespace}layout__item {
            width: auto;
        }
    }

    /**
     * Disable the flexbox grid
     */
    .#{$gel-grid-namespace}layout--no-flex {
        &,
        > .#{$gel-grid-namespace}layout__item {
            display: block;

            @if $enhanced {
                display: inline-block;
            }
        }
    }

    @if $enhanced {

        /**
         * Force items to be of equal height
         */
        .#{$gel-grid-namespace}layout--equal {
            > .#{$gel-grid-namespace}layout__item {
                display: -webkit-flex;
                display: flex;
            }
        }

        /**
         * Allow items to devide the space equally between the number of items
         */
        .#{$gel-grid-namespace}layout--fit {
            > .#{$gel-grid-namespace}layout__item {
                width: auto;
                -webkit-flex: 1 1 auto;
                -ms-flex: 1 1 auto;
                flex: 1 1 auto;
            }
        }

        /**
         * Align a single grid item to the top
         */
        .#{$gel-grid-namespace}layout__item--top {
            -webkit-align-self: flex-start;
            -ms-flex-item-align: start;
            align-self: flex-start;
        }

        /**
         * Align a single grid item to the center
         */
        .#{$gel-grid-namespace}layout__item--center {
            -webkit-align-self: center;
            -ms-flex-item-align: center;
            align-self: center;
        }

        /**
         * Align a single grid item to the bottom
         */
        .#{$gel-grid-namespace}layout__item--bottom {
            -webkit-align-self: flex-end;
            -ms-flex-item-align: end;
            align-self: flex-end;
        }
    }
}


// Outputs a collection of grid-agnostic width utility classes which can be applied be
// combined with the grid system or applied to any element to give it a percentage based with.
//
// If the optional 1280 toggle class is defined then all 1280 width classes will be wrapped
// in the specified toggle class
//
// @author Shaun Bent
//
@mixin gel-output-widths() {
    @if $core {
        @include _gel-widths($gel-grid-columns);
    }

    @if $enhanced {
        @each $breakpoint in $gel-grid-breakpoints {
            @include mq($from: '#{$gel-grid-breakpoint-namespace}#{$breakpoint}') {
                @include _gel-widths($gel-grid-columns, $breakpoint);
            }
        }

        @if $gel-grid-1280-toggle-class != null {
            .#{$gel-grid-1280-toggle-class} {
                @each $breakpoint in $gel-grid-breakpoints--1280 {
                    @include mq($from: '#{$gel-grid-breakpoint-namespace}#{$breakpoint}') {
                        @include _gel-widths($gel-grid-columns, $breakpoint);
                    }
                }
            }
        }
    }
}


// Returns a percentage value for the required number of columns
//
// @param {Number}  $span - number of columns required to span
// @param {Number}  $columns ($gel-grid-default-columns) - total number of columns available
//
// @return {Number} Percentage for the required number of columns
//
// @author          Shaun Bent
//
@function gel-columns($span, $columns: $gel-grid-default-columns) {
	@if $span >= 1 {
		// Convert the given span to a fraction of the columns
		@return percentage($span / $columns);
	} @else {
		// A fraction has been supplied so lets just converting it to a percentage
		@return percentage($span);
	}
}


// Get a width for a specific number of columns
//
// @param {Number} $span - number of columns required to span
// @param {Number} $columns ($gel-grid-default-columns) - total number of columns available
//
// @author Shaun Bent
//
@mixin gel-columns($span, $columns: $gel-grid-default-columns) {
	width: gel-columns($span, $columns);
}


// Generate width classes for the requested columns and breakpoint modifier
//
// @param {List} $columns - a list of all the columns you'd like to be output
// @param {String} $breakpoint - any breakpoint suffix appended to the class
//
// @author Shaun Bent
//
@mixin _gel-widths($columns, $breakpoint: null) {
    $breakpoint-suffix: '';

    @if $breakpoint != null {
        $breakpoint-suffix: \@#{$breakpoint};
    }

	@each $column in $columns {
		@if $column == 1 {
			// no point outputting 100% several times so lets just do it once
			.#{$gel-grid-namespace}#{$column}\/#{$column}#{$breakpoint-suffix} {
				width: 100% !important;
			}
		} @else {
			@for $i from 1 to $column {
				.#{$gel-grid-namespace}#{$i}\/#{$column}#{$breakpoint-suffix} {
					width: gel-columns($i / $column) !important;
				}
			}
		}
	}
}
